/**
 * tests/unify/UnifyGlobUTest.cxxtest
 *
 * Copyright (C) 2019 OpenCog Foundation
 * All Rights Reserved
 * Author: Kasim Ebrahim
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/Logger.h>

#include <opencog/atoms/core/Context.h>
#include <opencog/unify/Unify.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

class UnifyGlobUTest :  public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;
	// Note: GlobNodes are in uppercase and
	// variables are in lower case.
	Handle X, Y, Z, U, x, y, XY, XYZ, A, B, C, AB, ABC, ABx, YBC,
			P, Q, R, ABCXR, YCPQR, XYA, PQRU;
	Context::VariablesStack X_varstack;

public:
	UnifyGlobUTest() : _eval(&_as)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);
		logger().set_timestamp_flag(false);

		X = an(GLOB_NODE, "$X");
		Y = an(GLOB_NODE, "$Y");
		Z = an(GLOB_NODE, "$Z");
		U = an(GLOB_NODE, "$U");

		x = an(VARIABLE_NODE, "$x");
		y = an(VARIABLE_NODE, "$y");

		XY = al(LIST_LINK, X, Y);
		XYZ = al(LIST_LINK, X, Y, Z);

		A = an(CONCEPT_NODE, "A");
		B = an(CONCEPT_NODE, "B");
		C = an(CONCEPT_NODE, "C");

		P = an(PREDICATE_NODE, "P");
		Q = an(PREDICATE_NODE, "Q");
		R = an(PREDICATE_NODE, "R");

		AB = al(LIST_LINK, A, B);
		ABC = al(LIST_LINK, A, B, C);
		ABx = al(LIST_LINK, A, B, x);
		YBC = al(LIST_LINK, Y, B, C);

		ABCXR = al(LIST_LINK, A, B, C, X, R);
		YCPQR = al(LIST_LINK, Y, C, P, Q, R);
		XYA = al(LIST_LINK, X, Y, A);
		PQRU = al(LIST_LINK, P, Q, R, U);
	}

	void setUp();

	void test_type_intersection_1();
	void test_type_intersection_2();
	void test_type_intersection_3();
	void test_type_intersection_4();
	void test_type_intersection_5();

	void test_unify_basic_1();
	void test_unify_basic_2();
	void test_unify_basic_3();
	void test_unify_basic_4();
	void test_unify_basic_5();

	void test_unify_multi_val_1();
	void test_unify_multi_val_2();
	void test_unify_multi_val_3();
	void test_unify_multi_val_4();

	void test_unify_typed_1();
	void test_unify_typed_2();
	void test_unify_typed_3();
	void test_unify_typed_4();
	void test_unify_typed_5();
	void test_unify_typed_6();
};

void UnifyGlobUTest::setUp(void)
{
}

void UnifyGlobUTest::test_type_intersection_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle lhs = X;
	Handle rhs = x;
	Unify unify(lhs, rhs);
	Unify::CHandle result = unify.type_intersection(lhs, rhs),
			expected = rhs;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_type_intersection_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle lhs = X;
	Handle rhs = Y;

	Handle l_decl = al(TYPED_VARIABLE_LINK,
	                   X,
	                   al(TYPE_INTERSECTION_LINK,
	                      al(INTERVAL_LINK,
	                         an(NUMBER_NODE, "1"),
	                         an(NUMBER_NODE, "4")),
	                      an(TYPE_NODE, "PredicateNode")));

	Handle r_decl = al(TYPED_VARIABLE_LINK,
	                   Y,
	                   al(TYPE_INTERSECTION_LINK,
	                      al(INTERVAL_LINK,
	                         an(NUMBER_NODE, "2"),
	                         an(NUMBER_NODE, "3")),
	                      an(TYPE_NODE, "PredicateNode")));

	Unify unify(lhs, rhs, l_decl, r_decl);
	Unify::CHandle result = unify.type_intersection(lhs, rhs),
			expected = rhs;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_type_intersection_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle lhs = X;
	Handle rhs = AB;

	Handle l_decl = al(VARIABLE_LIST,
	                   al(TYPED_VARIABLE_LINK,
	                      X,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "1"),
	                            an(NUMBER_NODE, "2")),
	                         an(TYPE_NODE, "ConceptNode"))));

	Unify unify(lhs, rhs, l_decl);
	Unify::CHandle result = unify.type_intersection(lhs, rhs),
			expected = rhs;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_type_intersection_4()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle lhs = X;
	Handle rhs = AB;

	Handle l_decl = al(VARIABLE_LIST,
	                   al(TYPED_VARIABLE_LINK,
	                      X,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "1"),
	                            an(NUMBER_NODE, "1")),
	                         an(TYPE_NODE, "ConceptNode"))));

	Unify unify(lhs, rhs, l_decl);
	Unify::CHandle result = unify.type_intersection(lhs, rhs),
			expected = Unify::CHandle(Handle::UNDEFINED);

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_type_intersection_5()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle lhs = X;
	Handle rhs = AB;

	Handle l_decl = al(VARIABLE_LIST,
	                   al(TYPED_VARIABLE_LINK,
	                      X,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "1"),
	                            an(NUMBER_NODE, "2")),
	                         an(TYPE_NODE, "ConceptNode"))));

	Unify unify(lhs, rhs, l_decl);
	Unify::CHandle result = unify.type_intersection(lhs, rhs),
			expected = rhs;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_basic_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Unify unify(X, A);
	Unify::SolutionSet result = unify();
	Unify::SolutionSet expected =
			Unify::SolutionSet({{{{X, A}, A}}});

	std::cout << "result = " << oc_to_string(result) << std::endl;
	std::cout << "expected = " << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_basic_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Unify unify(X, Y);
	Unify::SolutionSet result = unify();

	// Note: The second element in a TypedBlock contains the most
	// specialized term. Yet at this instance neither[X nor Y] is more
	// specialized than the other.
	// The most specialized term is used to designate the type, meaning
	// for variables 'X' and 'Y' {{X, Y}, Y} and {{X, Y}, X} are considered
	// the same and wont be considered as two partitions of a solutionset.
	Unify::SolutionSet expected_1 =
			Unify::SolutionSet({{{{X, Y}, Y}}});
	Unify::SolutionSet expected_2 =
			Unify::SolutionSet({{{{X, Y}, X}}});

	std::cout << "result = " << oc_to_string(result) << std::endl;
	std::cout << "expected_1 = " << oc_to_string(expected_1) << std::endl;
	std::cout << "expected_2 = " << oc_to_string(expected_2) << std::endl;

	TS_ASSERT((result==expected_1) or (result==expected_2))

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_basic_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Unify unify(X, x);
	Unify::SolutionSet result = unify();

	// Note: For two type undeclared Glob 'X' and Variable 'x', the
	// variable x is considered more specialized than the GlobNode.
	Unify::SolutionSet expected =
			Unify::SolutionSet({{{{X, x}, x}}});

	std::cout << "result = " << oc_to_string(result) << std::endl;
	std::cout << "expected = " << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_basic_4()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Unify unify(x, X);
	Unify::SolutionSet result = unify();

	// Note: For two type undeclared Glob 'X' and Variable 'x', the
	// variable x is considered more specialized than the GlobNode.
	Unify::SolutionSet expected =
			Unify::SolutionSet({{{{X, x}, x}}});

	std::cout << "result = " << oc_to_string(result) << std::endl;
	std::cout << "expected = " << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_basic_5()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Unify unify(X, AB);
	Unify::SolutionSet result = unify();

	Unify::SolutionSet expected =
			Unify::SolutionSet({{{{X, al(LIST_LINK, A, B)}, al(LIST_LINK, A, B)}}});

	std::cout << "result = " << oc_to_string(result) << std::endl;
	std::cout << "expected = " << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_multi_val_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Unify unify(XY, ABC);
	Unify::SolutionSet result = unify();

	Unify::SolutionSet expected =
			Unify::SolutionSet(
					{{{{X, A}, A},
					  {{Y, al(LIST_LINK, HandleSeq{B, C})}, al(LIST_LINK, HandleSeq{B, C})}},
					 {{{X, al(LIST_LINK, HandleSeq{A, B})}, al(LIST_LINK, HandleSeq{A, B})},
					  {{Y, C}, C}}});

	std::cout << "result = " << oc_to_string(result) << std::endl;
	std::cout << "expected = " << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_multi_val_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Unify unify(al(LIST_LINK, U), al(LIST_LINK, U));
	Unify::SolutionSet result = unify();
	std::cout << "\n result\n" << oc_to_string(result) << std::endl;

	Unify::SolutionSet expected = Unify::SolutionSet(true);
	std::cout << "\n expected\n" << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_multi_val_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Unify unify(XYZ, al(LIST_LINK, U));
	Unify::SolutionSet result = unify();
	std::cout << "\n result\n" << oc_to_string(result) << std::endl;

	Unify::SolutionSet expected =
			Unify::SolutionSet(
					{{{{U, al(LIST_LINK, {X, Y, Z})}, al(LIST_LINK, {X, Y, Z})}}});
	std::cout << "\n expected\n" << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_multi_val_4()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Unify unify(ABx, YBC);
	Unify::SolutionSet result = unify();
	std::cout << "\n result\n" << oc_to_string(result) << std::endl;

	Unify::SolutionSet expected =
			Unify::SolutionSet({{{{Y, A}, A}, {{x, C}, C}}});
	std::cout << "\n expected\n" << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_typed_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle l_decl = al(TYPED_VARIABLE_LINK,
	                      Y,
	                      an(TYPE_NODE, "ConceptNode"));

	Unify unify(X, A, l_decl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	// If X is not in the var declaration it is
	// treated as a constant term.
	Unify::SolutionSet expected(false);
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_typed_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle l_decl = al(TYPED_VARIABLE_LINK,
	                   X,
	                   an(TYPE_NODE, "PredicateNode"));

	Handle r_decl = al(TYPED_VARIABLE_LINK,
	                   Y,
	                   an(TYPE_NODE, "ConceptNode"));

	Unify unify(ABCXR, YCPQR, l_decl, r_decl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{Y, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
								  {{X, al(LIST_LINK, {P, Q})}, al(LIST_LINK, {P, Q})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_typed_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle l_decl = al(TYPED_VARIABLE_LINK,
	                   U,
	                   al(TYPE_INTERSECTION_LINK,
	                      al(INTERVAL_LINK,
	                         an(NUMBER_NODE, "0"),
	                         an(NUMBER_NODE, "2")),
	                      an(TYPE_NODE, "GlobNode")));
	Handle r_decl = al(VARIABLE_LIST,
	                   al(TYPED_VARIABLE_LINK,
	                      X,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "1"),
	                            an(NUMBER_NODE, "1")),
	                         an(TYPE_NODE, "GlobNode"))),
	                   al(TYPED_VARIABLE_LINK,
	                      Y,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "0"),
	                            an(NUMBER_NODE, "+inf")),
	                         an(TYPE_NODE, "GlobNode"))),
	                   al(TYPED_VARIABLE_LINK,
	                      Z,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "0"),
	                            an(NUMBER_NODE, "+inf")),
	                         an(TYPE_NODE, "GlobNode"))));

	Unify unify(al(LIST_LINK, U), XYZ, l_decl, r_decl);
	Unify::SolutionSet result = unify();
	std::cout << "\n result\n" << oc_to_string(result) << std::endl;

	Unify::SolutionSet expected =
			Unify::SolutionSet(
					{{{{U, al(LIST_LINK, {X, Y})}, al(LIST_LINK, {X, Y})},
					  {{Z, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, X}, U},
					  {{Y, Z, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, X}, X},
					  {{Y, Z, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}}});
	std::cout << "\n expected\n" << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_typed_4()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle l_decl = al(TYPED_VARIABLE_LINK,
	                   U,
	                   al(TYPE_INTERSECTION_LINK,
	                      al(INTERVAL_LINK,
	                         an(NUMBER_NODE, "0"),
	                         an(NUMBER_NODE, "inf")),
	                      an(TYPE_NODE, "GlobNode")));
	Handle r_decl = al(VARIABLE_LIST,
	                   al(TYPED_VARIABLE_LINK,
	                      X,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "0"),
	                            an(NUMBER_NODE, "+inf")),
	                         an(TYPE_NODE, "GlobNode"))),
	                   al(TYPED_VARIABLE_LINK,
	                      Y,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "0"),
	                            an(NUMBER_NODE, "+inf")),
	                         an(TYPE_NODE, "GlobNode"))),
	                   al(TYPED_VARIABLE_LINK,
	                      Z,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "0"),
	                            an(NUMBER_NODE, "+inf")),
	                         an(TYPE_NODE, "GlobNode"))));

	Unify unify(al(LIST_LINK, U), XYZ, l_decl, r_decl);
	Unify::SolutionSet result = unify();

	std::cout << "\n result\n" << oc_to_string(result) << std::endl;
	Unify::SolutionSet expected =
			Unify::SolutionSet(
					{{{{U, al(LIST_LINK, {Y, Z})}, al(LIST_LINK, {Y, Z})},
					  {{X, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, al(LIST_LINK, {X, Y})}, al(LIST_LINK, {X, Y})},
					  {{Z, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, X}, U},
					  {{Y, Z, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, X}, X},
					  {{Y, Z, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, Z}, U},
					  {{Y, X, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, Z}, Z},
					  {{Y, X, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, Y}, U},
					  {{Z, X, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, Y}, Y},
					  {{Z, X, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, al(LIST_LINK, {X, Y, Z})}, al(LIST_LINK, {X, Y, Z})}},
					 {{{U, X, Y, Z, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}}});
	std::cout << "\n expected\n" << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_typed_5()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle l_decl = al(TYPED_VARIABLE_LINK,
	                   U,
	                   al(TYPE_INTERSECTION_LINK,
	                      al(INTERVAL_LINK,
	                         an(NUMBER_NODE, "2"),
	                         an(NUMBER_NODE, "inf")),
	                      an(TYPE_NODE, "GlobNode")));
	Handle r_decl = al(VARIABLE_LIST,
	                   al(TYPED_VARIABLE_LINK,
	                      X,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "0"),
	                            an(NUMBER_NODE, "+inf")),
	                         an(TYPE_NODE, "GlobNode"))),
	                   al(TYPED_VARIABLE_LINK,
	                      Y,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "2"),
	                            an(NUMBER_NODE, "+inf")),
	                         an(TYPE_NODE, "GlobNode"))),
	                   al(TYPED_VARIABLE_LINK,
	                      Z,
	                      al(TYPE_INTERSECTION_LINK,
	                         al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "2"),
	                            an(NUMBER_NODE, "+inf")),
	                         an(TYPE_NODE, "GlobNode"))));

	Unify unify(al(LIST_LINK, U), XYZ, l_decl, r_decl);
	Unify::SolutionSet result = unify();

	std::cout << "\n result\n" << oc_to_string(result) << std::endl;
	Unify::SolutionSet expected =
			Unify::SolutionSet(
					{{{{U, al(LIST_LINK, {Y, Z})}, al(LIST_LINK, {Y, Z})},
					  {{X, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})}},
					 {{{U, al(LIST_LINK, {X, Y, Z})}, al(LIST_LINK, {X, Y, Z})}}});
	std::cout << "\n expected\n" << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

void UnifyGlobUTest::test_unify_typed_6()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle l_decl = al(VARIABLE_LIST,
	                   al(TYPED_VARIABLE_LINK,
	                      X,
	                      al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "2"),
	                            an(NUMBER_NODE, "3"))),
	                   al(TYPED_VARIABLE_LINK,
	                      Y,
	                      al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "0"),
	                            an(NUMBER_NODE, "1"))));
	Handle r_decl = al(TYPED_VARIABLE_LINK,
	                      U,
	                      al(INTERVAL_LINK,
	                            an(NUMBER_NODE, "1"),
	                            an(NUMBER_NODE, "1")));

	Unify unify(XYA, PQRU, l_decl, r_decl);
	Unify::SolutionSet result = unify();

	std::cout << "\n result\n" << oc_to_string(result) << std::endl;
	Unify::SolutionSet expected =
			Unify::SolutionSet(
					{{{{X, al(LIST_LINK, {P, Q})}, al(LIST_LINK, {P, Q})},
					  {{Y, R}, R},
					  {{U, A}, A}},
					 {{{X, al(LIST_LINK, {P, Q, R})}, al(LIST_LINK, {P, Q, R})},
					  {{Y, al(LIST_LINK, HandleSeq{})}, al(LIST_LINK, HandleSeq{})},
					  {{U, A}, A}}});
	std::cout << "\n expected\n" << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected)

	logger().info("END TEST: %s", __FUNCTION__);
}

#undef al
#undef an
